// --- PMS7003 (Sensor de calidad del aire) ---
#define PMS_RX 21  // RX1: Entrada de datos desde el PMS7003
#define PMS_TX 22  // TX1: No se usa, pero es necesario definirlo
HardwareSerial pmsSerial(1); // UART1

uint8_t pmsBuffer[32]; // Buffer de datos
void setupPMS7003() {
  pmsSerial.begin(9600, SERIAL_8N1, PMS_RX, PMS_TX);
  Serial.println("PMS7003 iniciado correctamente.");
}
bool readPMSData(uint16_t &pm1_0, uint16_t &pm2_5, uint16_t &pm10) {
  while (pmsSerial.available() >= 32) {
    if (pmsSerial.read() == 0x42) {
      if (pmsSerial.read() == 0x4D) {
        pmsBuffer[0] = 0x42;
        pmsBuffer[1] = 0x4D;
        for (int i = 2; i < 32; i++) {
          while (!pmsSerial.available());
          pmsBuffer[i] = pmsSerial.read();
        }

        uint16_t checksum = 0;
        for (int i = 0; i < 30; i++) checksum += pmsBuffer[i];
        uint16_t received = ((uint16_t)pmsBuffer[30] << 8) | pmsBuffer[31];

        if (checksum == received) {
          pm1_0 = ((uint16_t)pmsBuffer[10] << 8) | pmsBuffer[11];
          pm2_5 = ((uint16_t)pmsBuffer[12] << 8) | pmsBuffer[13];
          pm10  = ((uint16_t)pmsBuffer[14] << 8) | pmsBuffer[15];
          return true;
        }
      }
    }
  }
  return false;
}
setupPMS7003();
// 8) Lectura y visualización de calidad del aire
uint16_t pm1_0 = 0, pm2_5 = 0, pm10 = 0;
if (readPMSData(pm1_0, pm2_5, pm10)) {
  Serial.printf("Calidad del aire -> PM1.0: %u µg/m³, PM2.5: %u µg/m³, PM10: %u µg/m³\n", pm1_0, pm2_5, pm10);
} else {
  Serial.println("No se pudo leer el sensor de calidad del aire.");
}
Estado estable.
Temp: 36.92 °C, BPM: 78.4, SpO2: 97%
Timestamp: 01/06/2025 14:36:12
Ubicación: Lat 4.710989, Lon -74.072092
Calidad del aire -> PM1.0: 12 µg/m³, PM2.5: 22 µg/m³, PM10: 28 µg/m³
-------------------------------
